/*IMPLEMENTATION OF HEAP DATA STRUCTURE*/
#include<iostream>
#include <algorithm>
using namespace std;

class heap{
    public:
    int arr[1000];
    int size;
    
    heap(){
        arr[0]= -1;
        size = 0;
    }
    void insert(int val){
        size = size + 1;
        int index = size;
        arr[index] = val;
        
        while(index>1){   // index element is root
        int parent = index/2;
            if(arr[parent] < arr[index]){
                swap(arr[parent],arr[index]);
                index = parent;
            }
            else{
                return;
            }
        }
    }
    void print(){
        for(int i = 1 ; i<=size ; i++){
            cout<< arr[i]<<" ";
        }cout<<endl;
    }
    
    void deletefromHeap(){
        //we delete the root element and then set the last element then adjust them.
        //base case
        if(size == 0){
            cout<<"empty heap"<<endl;
            return;
        }
        //step1 : put the last element to first index
        arr[1] = arr[size];
        //step2 : remove the last element 
        size--;
        //step3 : swap and adjust the element and set the root element
        int i = 1;
        while(i<size){
            int leftindex = 2*i;
            int rightindex = 2*i+1;
            
            if(leftindex < size && arr[i]<arr[leftindex]){
                swap(arr[i], arr[leftindex]);
                i = leftindex;
            }
            else if(rightindex < size && arr[i]<arr[rightindex]){
                swap(arr[i], arr[rightindex]);
                i = rightindex;
            }
            else{
                return;
            }
        }
    }
   
};
 // heapify is the function that transform any array in the heap
    void heapify(int arr[], int n , int i){
        int largest = i;
        int left = 2*i;
        int right = 2*i + 1;
        
        // if the left is largest
        if(left<n && arr[left] > arr[largest]){
            largest = left;
        }
        //if the right is largest
        if(right<n && arr[right] > arr[largest]){
            largest = right;
        }
        //if largest is not equal to i the swap the arr element
        if(largest != i){
            swap(arr[largest], arr[i]);
            heapify(arr , n , largest);
        }
    }
int main(){
        heap h;
        
        h.insert(21);
        h.insert(23);
        h.insert(34);
        h.insert(36);
        h.insert(29);
        h.print();
        
        h.deletefromHeap();
        h.print();
        
        // CREATING THE ARRAY AND HEAPIFY THAT ARRAY
        
        int arr[5] = {-1 , 53 , 52 , 51 , 56};
        int n=5;
        for(int i=n/2 ; i>0 ; i--){  // n/2+1 to n are leaf node.
            heapify(arr , n , i);
        }
        cout<<" printing the heap "<<endl;
        for(int i=1 ; i<n ; i++){
            cout<<arr[i]<<" ";
        }cout<<endl;
        
        return 0;
}
