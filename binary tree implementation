#include <iostream>
#include <queue>
using namespace std;

class node {
    public:
        int data;
        node* left;
        node* right;

    node(int d) {
        this -> data = d;
        this -> left = NULL;
        this -> right = NULL;
    }
};

node* buildTree(node* root) {

    cout << "Enter the data: " << endl;
    int data;
    cin >> data;
    root = new node(data);    

    if(data == -1) {
        return NULL;
    }

    cout << "Enter data for inserting in left of " << data << endl;
    root->left = buildTree(root->left);
    cout << "Enter data for inserting in right of " << data << endl;
    root->right = buildTree(root->right);
    return root;

}
void levelOrderTraversal(node* root){
    queue<node*> q;
    q.push(root);
    q.push(NULL);
    
    while(!q.empty()){
        // take temp node the break the line if temp== null else push child
        node* temp = q.front();
        q.pop();
        
        if(temp==NULL){
            // purana level complete ho tho
            cout<<endl;
            if(!q.empty()){
                q.push(NULL);
            }
        }
        else{
            cout<<temp->data<<" ";
            if(temp->left){
                q.push(temp->left);
            }
            if(temp->right){
                q.push(temp->right);
            }
        }
    }
}
//inorder {left root right}
void inorder(node* root){
    //base case
    if(root == NULL){
        return;
    }
    //recursive case
    inorder(root->left);
    cout<<root->data<<endl;
    inorder(root->right);
}
//preorder {root left right}
void preorder(node* root){
    //base case
    if(root == NULL){
        return;
    }
    //recursive case
    cout<<root->data<<endl;
    preorder(root->left);
    preorder(root->right);
}
//postorder {left right root}
void postorder(node* root){
    //base case
    if(root == NULL){
        return;
    }
    //recursive case
    postorder(root->left);
    postorder(root->right);
    cout<<root->data<<endl;
}
void buildFromLevelOrder(node* &root){
    queue<node*>q;
    
    cout<<"enter the element of root"<<endl;
    int data;
    cin>>data;
    root = new node(data);
    
    q.push(root);
    while(!q.empty()){
        node* temp = q.front();
        q.pop();
        
        // insertion in left subtree
        cout<<"enter the left node for"<<temp->data<<endl;
        int leftdata;
        cin>>leftdata;
        
        if (leftdata!=-1){
            temp->left = new node(leftdata);
            q.push(temp->left);
        }
            
        //insertion in right subtree
        cout<<"enter the right node for"<<temp->data<<endl;
        int rightdata;
        cin>>rightdata;
        
        if (rightdata!=-1){
            temp->right = new node(rightdata);
            q.push(temp->right);
        }
    }
}
int main() {
    
    node* root = NULL;
    /*
    buildFromLevelOrder(root);
    levelOrderTraversal(root);
    // 1 3 5 7 11 17 -1 -1 -1 -1 -1 -1 -1

    */
    //creating a Tree
    root = buildTree(root);
    //1 3 7 -1 -1 11 -1 -1 5 17 -1 -1 -1 
    //level order
    cout << "Printing the level order tracersal output " << endl;
    levelOrderTraversal(root);

    cout << "inorder traversal is:  ";
    inorder(root); 

    cout << endl << "preorder traversal is:  ";
    preorder(root); 

    cout << endl << "postorder traversal is:  ";
    postorder(root); 


    return 0;
}
