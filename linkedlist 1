#include <iostream>
using namespace std;

class node {
public:
    int data;
    node* next;

    // constructor
    node(int data) {
        this->data = data;
        this->next = NULL;
    }

    // destructor
    ~node() {
        int value = this->data;
        // memory free
        if (this->next != NULL) {
            delete this->next;
        }
        cout << "Memory is freed for node with data " << value << endl;
    }
};

void insertat_head(node*& head, int d) {
    // new node create
    node* temp = new node(d);
    temp->next = head;
    head = temp;
}

void insertat_tail(node*& tail, int d) {
    // new node create
    node* temp = new node(d);
    tail->next = temp;
    tail = temp;
}

void insertat_position(node* &tail,node* &head, int position, int d) {
    // insert at start
    if (position == 1) {
        insertat_head(head, d);
        return;
    }

    node* temp = head;
    int count = 1;

    while (count < position - 1 && temp != NULL) {
        temp = temp->next;
        count++;
    }

    // insert at end if position exceeds the length of the list
    if (temp == NULL || temp->next == NULL) {
        insertat_tail(head, d);
        return;
    }

    // create a node
    node* nodetoinsert = new node(d);
    nodetoinsert->next = temp->next;
    temp->next = nodetoinsert;
}
void deletenode(int position, node* &head){
    //deleting first or start node
    if(position ==1){
        node* temp = head;
        head = head->next;
        //free Memory
        temp-> next = NULL;
        delete temp;
    }
    else{
        //deleting  any node and last node
        node* curr= head;
        node* prev= NULL;
        
        int count = 1;
        while(count < position){
            prev = curr;
            curr = curr->next;
            count++;
        }
        
        prev -> next = curr -> next;
        curr -> next = NULL;
        delete curr;
    }
}

void print(node* head) {
    node* temp = head;  // start with head node

    while (temp != NULL) {
        cout << temp->data << " ";  // print head data
        temp = temp->next;
    }
    cout << endl;
}

int main() {

    node* node1 = new node(10);
    // head pointed to node
    node* head = node1;
    // tail pointed to node
    node* tail = node1;
    print(head);

    insertat_head(head, 20);
    print(head);
    insertat_tail(tail, 40);
    print(head);

    insertat_position(tail,head, 3, 22);
    print(head);
    
    cout<<"head"<<head->data<<endl;
    cout<<"tail"<<tail->data<<endl;
    
    delete(3,head);
    print(head);

    return 0;
}
