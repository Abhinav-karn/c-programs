#include <iostream>

using namespace std;

// Node class representing a node in a doubly linked list
class node {
public:
    int data;
    node* prev;
    node* next;

    // Constructor 
    node(int d) {
        this->data = d;
        this->next = NULL;
        this->prev = NULL;
    }

    // Destructor
    ~node() {
        int val = this->data;
        if (next != NULL) {
            delete next;
            next = NULL;
        }
        cout << "Memory is freed for node with data " << val << endl;
    }
};

// Function to print the elements of the linked list
void print(node* head) {
    node* temp = head;

    while (temp != NULL) {
        cout << temp->data << " ";
        temp = temp->next; // Move to the next node
    }
    cout << endl;
}

// Function to get the length of the linked list
int getlength(node* head) {
    int len = 0;
    node* temp = head;

    while (temp != NULL) {
        len++;
        temp = temp->next;
    }
    return len;
}

// Function to insert a node at the head of the linked list
void insertat_head(node* &head, int d) {
    // Create a new node
    node* temp = new node(d);
    
    // Update links to insert at the head
    temp->next = head;
    head->prev = temp;
    
    // Update the head to the new node
    head = temp;
}

// Function to insert a node at the tail of the linked list
void insertat_tail(node* &tail, int d) {
    // Create a new node
    node* temp = new node(d);
    
    // Update links to insert at the tail
    tail->next = temp;
    temp->prev = tail;
    
    // Update the tail to the new node
    tail = temp;
}

// Function to insert a node at a specified position in the linked list
void insertat_position(node* &tail, node* &head, int position, int d) {
    // Insert at the start
    if (position == 1) {
        insertat_head(head, d);
        return;
    }

    // Traverse to the position
    node* temp = head;
    int count = 1;

    while (count < position - 1) {
        temp = temp->next;
        count++;
    }

    // Insert at the last position
    if (temp->next == NULL) {
        insertat_tail(tail, d);
        return;
    }

    // Create a new node for data
    node* nodetoinsert = new node(d);

    // Update links to insert at the specified position
    nodetoinsert->next = temp->next;
    temp->next->prev = nodetoinsert;
    temp->next = nodetoinsert;
    nodetoinsert->prev = temp;
}

// Function to delete a node at a specified position in the linked list
void deletenode(int position, node* &head) {
    // Deleting the first or start node
    if (position == 1) {
        node* temp = head;
        temp->next->prev = NULL;
        head = temp->next;
        temp->next = NULL;
        delete temp;
    } else {
        // Deleting any middle node or last node
        node* curr = head;
        node* prev = NULL;

        int count = 1;

        while (count < position) {
            prev = curr;
            curr = curr->next;
            count++;
        }

        // Update links to delete the node
        curr->prev = NULL;
        prev->next = curr->next;
        curr->next = NULL;

        // Free the memory for the deleted node
        delete curr;
    }
}

// Main function
int main() {
    // Create the first node
    node* node1 = new node(10);
    node* head = node1;
    node* tail = node1;

    // Print the initial linked list
    print(head);

    // Insert a node at the head
    insertat_head(head, 20);
    print(head);

    // Insert a node at the tail
    insertat_tail(tail, 30);
    print(head);

    // Insert a node at a specified position
    insertat_position(tail, head, 3, 40);
    print(head);

    // Delete a node at a specified position
    cout << "Delete node at 3rd position" << endl;
    deletenode(3, head);
    print(head);

    return 0;
}
